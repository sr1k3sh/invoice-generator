import {  createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';


export interface itemPayload {
    key: number;
    stotal: number;
    item: string;
    description: string;
    quantity: number;
    rate: number;
}

export interface fromInformation {
  email: string;
  info: string;
}

export interface InvoiceState {
  invoiceItems: itemPayload[];
  status: 'idle' | 'loading' | 'failed';
  subtotal: number;
  total: number;
  discount: number;
  tax: number;
  invoiceNumber: number;
  currentDate: string;
  dueDate: string;
  fromInfo: fromInformation;
  toInfo: fromInformation;
  currency: string;
}

const initialState: InvoiceState = {
  invoiceItems: [],
  status: 'idle',
  discount: 0,
  subtotal:0,
  total: 0,
  tax: 0,
  invoiceNumber: 0,
  currentDate: 'dd-mm-yyyy',
  dueDate: 'dd-mm-yyyy',
  fromInfo: {
    email: "",
    info: ""
  },
  toInfo: {
    email: "",
    info: ""
  },
  currency: "$"
};

const calculateTotal = (dis:number , gtotal:number , tax:number = 0) =>{
  let disCountAmount = (dis/100) * gtotal;
  let total = gtotal - disCountAmount;

  let taxAmount = (tax/100) * total;

  return total + taxAmount;
}

export const invoiceCalcSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setInvoiceContent: (state, action: PayloadAction<itemPayload>)=>{
        state.invoiceItems = state.invoiceItems.filter(s=>s.key !== action.payload.key);
        state.invoiceItems.push(action.payload);
        let grossTotal = state.invoiceItems.map(s=>s.stotal).reduce((a,c,i)=> a+c,0);
        state.subtotal = grossTotal;
        state.total = calculateTotal(state.discount , grossTotal , state.tax);
    },
    captureDiscount: (state, action: PayloadAction<number>) =>{
      state.discount = action.payload;
      let grossTotal = state.invoiceItems.map(s=>s.stotal).reduce((a,c,i)=> a+c,0);
      state.subtotal = grossTotal;
      state.total = calculateTotal(action.payload , grossTotal , state.tax);
    },
    captureTax: (state, action: PayloadAction<number>) =>{
      state.tax = action.payload;
      let grossTotal = state.invoiceItems.map(s=>s.stotal).reduce((a,c,i)=> a+c,0);
      state.subtotal = grossTotal;
      state.total = calculateTotal(state.discount , grossTotal , action.payload);
    },
    calcRemovedTotal: ( state , action: PayloadAction<number>) =>{
        state.invoiceItems = state.invoiceItems.filter(s=> s.stotal !== action.payload);
        let grossTotal = state.invoiceItems.map(s=>s.stotal).reduce((a,c,i)=> a+c,0);
        state.subtotal = grossTotal;
        state.total = calculateTotal(state.discount , grossTotal , state.tax);
    },
    setInvoiceNumber: ( state , action: PayloadAction<number>) =>{
      state.invoiceNumber = action.payload;
    },
    setCurrentDate: (state, action: PayloadAction<string>)=>{
      state.currentDate = action.payload;
    },
    setDueDate: (state, action: PayloadAction<string>) => {
      state.dueDate = action.payload;
    },
    setFromInfo: (state, action: PayloadAction<fromInformation>) =>{
      state.fromInfo = action.payload;
    },
    setToInfo : (state, action: PayloadAction<fromInformation>) =>{
      state.toInfo = action.payload;
    },
    setCurrency : (state , action: PayloadAction<string>) =>{
      state.currency = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = 'idle';
    //     state.value += action.payload;
    //   })
    //   .addCase(incrementAsync.rejected, (state) => {
    //     state.status = 'failed';
    //   });
  },
});

export const { setInvoiceContent , captureDiscount , captureTax , calcRemovedTotal , setInvoiceNumber , setCurrentDate , setDueDate , setFromInfo , setToInfo , setCurrency } = invoiceCalcSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getInvoiceState = (state: RootState) => state.invoice;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default invoiceCalcSlice.reducer;
